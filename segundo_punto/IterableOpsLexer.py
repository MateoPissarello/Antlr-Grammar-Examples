# Generated from IterableOps.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,81,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
        6,1,6,1,7,1,7,5,7,49,8,7,10,7,12,7,52,9,7,1,8,4,8,55,8,8,11,8,12,
        8,56,1,9,1,9,5,9,61,8,9,10,9,12,9,64,9,9,1,9,1,9,1,10,3,10,69,8,
        10,1,10,1,10,1,10,1,10,1,11,4,11,76,8,11,11,11,12,11,77,1,11,1,11,
        1,62,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,2,0,9,9,32,32,85,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,29,1,
        0,0,0,5,31,1,0,0,0,7,33,1,0,0,0,9,35,1,0,0,0,11,42,1,0,0,0,13,44,
        1,0,0,0,15,46,1,0,0,0,17,54,1,0,0,0,19,58,1,0,0,0,21,68,1,0,0,0,
        23,75,1,0,0,0,25,26,5,77,0,0,26,27,5,65,0,0,27,28,5,80,0,0,28,2,
        1,0,0,0,29,30,5,40,0,0,30,4,1,0,0,0,31,32,5,44,0,0,32,6,1,0,0,0,
        33,34,5,41,0,0,34,8,1,0,0,0,35,36,5,70,0,0,36,37,5,73,0,0,37,38,
        5,76,0,0,38,39,5,84,0,0,39,40,5,69,0,0,40,41,5,82,0,0,41,10,1,0,
        0,0,42,43,5,91,0,0,43,12,1,0,0,0,44,45,5,93,0,0,45,14,1,0,0,0,46,
        50,7,0,0,0,47,49,7,1,0,0,48,47,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,
        0,50,51,1,0,0,0,51,16,1,0,0,0,52,50,1,0,0,0,53,55,7,2,0,0,54,53,
        1,0,0,0,55,56,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,18,1,0,0,0,
        58,62,5,34,0,0,59,61,9,0,0,0,60,59,1,0,0,0,61,64,1,0,0,0,62,63,1,
        0,0,0,62,60,1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,66,5,34,0,0,66,
        20,1,0,0,0,67,69,5,13,0,0,68,67,1,0,0,0,68,69,1,0,0,0,69,70,1,0,
        0,0,70,71,5,10,0,0,71,72,1,0,0,0,72,73,6,10,0,0,73,22,1,0,0,0,74,
        76,7,3,0,0,75,74,1,0,0,0,76,77,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,
        0,78,79,1,0,0,0,79,80,6,11,0,0,80,24,1,0,0,0,6,0,50,56,62,68,77,
        1,6,0,0
    ]

class IterableOpsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    IDENTIFIER = 8
    INT = 9
    STRING = 10
    NEWLINE = 11
    WS = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'MAP'", "'('", "','", "')'", "'FILTER'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "INT", "STRING", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "IDENTIFIER", "INT", "STRING", "NEWLINE", "WS" ]

    grammarFileName = "IterableOps.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


